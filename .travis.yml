sudo: false
language: cpp
dist: trusty

if: type != push OR branch =~ /^v\d+\.\d+(\.\d+)?(-\S*)?$/

install:
 - export BASE=`pwd`
 - mkdir ${BASE}/usr
 - if [ "$TRAVIS_OS_NAME" == "linux" ]; then wget --no-check-certificate https://cmake.org/files/v3.8/cmake-3.8.2-Linux-x86_64.sh -O cmake-3.8.2-Linux-x86_64.sh; fi
 - if [ "$TRAVIS_OS_NAME" == "linux" ]; then chmod a+x cmake-3.8.2-Linux-x86_64.sh; fi
 - if [ "$TRAVIS_OS_NAME" == "linux" ]; then ./cmake-3.8.2-Linux-x86_64.sh --prefix=${BASE}/usr --skip-license; fi
 - if [ "$TRAVIS_OS_NAME" == "linux" ]; then export PATH="${BASE}/usr/bin:$PATH"; fi
 - if [ "$TRAVIS_OS_NAME" == "linux" ]; then export LD_LIBRARY_PATH="${BASE}/usr/lib:$LD_LIBRARY_PATH"; fi
 - if [ "$CXX" = "g++" ]; then export CXX="g++-7" CC="gcc-7"; fi
 - if [ "$CXX" = "clang++" ] && [ "$TRAVIS_OS_NAME" == "linux" ]; then export CXX="clang++-5.0" CC="clang-5.0"; fi
 - if [ "$TRAVIS_OS_NAME" == "linux" ]; then export OPENSSL_ROOT_DIR="${BASE}/usr"; fi
 - if [ "$TRAVIS_OS_NAME" == "osx" ]; then export OPENSSL_ROOT_DIR="/usr/local/opt/openssl"; fi

matrix:
  include:
    - os: osx
      compiler: clang
      env: FLAGS="-DMQTT_TEST_1=ON  -DMQTT_TEST_2=ON  -DMQTT_TEST_3=OFF -DMQTT_TEST_4=OFF -DMQTT_TEST_5=ON  -DMQTT_TEST_6=OFF -DMQTT_TEST_7=OFF -DMQTT_USE_TLS=OFF  -DMQTT_BUILD_EXAMPLES=OFF -DMQTT_USE_WS=ON" CXXFLAGS="-std=c++14" MAKEFLAGS="-j2"
    - os: osx
      compiler: clang
      env: FLAGS="-DMQTT_TEST_1=OFF -DMQTT_TEST_2=OFF -DMQTT_TEST_3=ON  -DMQTT_TEST_4=OFF -DMQTT_TEST_5=OFF -DMQTT_TEST_6=OFF -DMQTT_TEST_7=OFF -DMQTT_USE_TLS=OFF  -DMQTT_BUILD_EXAMPLES=OFF -DMQTT_USE_WS=ON" CXXFLAGS="-std=c++14" MAKEFLAGS="-j2"
    - os: osx
      compiler: clang
      env: FLAGS="-DMQTT_TEST_1=OFF -DMQTT_TEST_2=OFF -DMQTT_TEST_3=OFF -DMQTT_TEST_4=ON  -DMQTT_TEST_5=OFF -DMQTT_TEST_6=OFF -DMQTT_TEST_7=OFF -DMQTT_USE_TLS=OFF  -DMQTT_BUILD_EXAMPLES=OFF -DMQTT_USE_WS=ON" CXXFLAGS="-std=c++14" MAKEFLAGS="-j2"
    - os: osx
      compiler: clang
      env: FLAGS="-DMQTT_TEST_1=ON  -DMQTT_TEST_2=OFF -DMQTT_TEST_3=OFF -DMQTT_TEST_4=OFF -DMQTT_TEST_5=OFF -DMQTT_TEST_6=OFF -DMQTT_TEST_7=OFF -DMQTT_USE_TLS=ON -DMQTT_BUILD_EXAMPLES=ON  -DMQTT_USE_WS=ON  -DMQTT_USE_STR_CHECK=ON" CXXFLAGS="-std=c++14" MAKEFLAGS="-j2"
    - os: osx
      compiler: clang
      env: FLAGS="-DMQTT_TEST_1=OFF -DMQTT_TEST_2=ON  -DMQTT_TEST_3=ON  -DMQTT_TEST_4=OFF -DMQTT_TEST_5=OFF -DMQTT_TEST_6=ON  -DMQTT_TEST_7=OFF -DMQTT_USE_TLS=ON -DMQTT_BUILD_EXAMPLES=OFF -DMQTT_USE_WS=OFF -DMQTT_USE_STR_CHECK=ON" CXXFLAGS="-std=c++14" MAKEFLAGS="-j2"
    - os: osx
      compiler: clang
      env: FLAGS="-DMQTT_TEST_1=OFF -DMQTT_TEST_2=OFF -DMQTT_TEST_3=OFF -DMQTT_TEST_4=ON  -DMQTT_TEST_5=ON  -DMQTT_TEST_6=OFF -DMQTT_TEST_7=OFF -DMQTT_USE_TLS=ON -DMQTT_BUILD_EXAMPLES=OFF -DMQTT_USE_WS=OFF -DMQTT_USE_STR_CHECK=ON" CXXFLAGS="-std=c++14" MAKEFLAGS="-j2"
    - os: osx
      compiler: clang
      env: FLAGS="-DMQTT_TEST_1=OFF -DMQTT_TEST_2=OFF -DMQTT_TEST_3=OFF -DMQTT_TEST_4=OFF -DMQTT_TEST_5=OFF -DMQTT_TEST_6=ON  -DMQTT_TEST_7=ON  -DMQTT_USE_TLS=ON -DMQTT_BUILD_EXAMPLES=OFF -DMQTT_USE_WS=OFF -DMQTT_USE_STR_CHECK=ON" CXXFLAGS="-std=c++17" MAKEFLAGS="-j2"
    - os: linux
      compiler: clang
      env: FLAGS="-DMQTT_TEST_1=ON  -DMQTT_TEST_2=ON  -DMQTT_TEST_3=OFF -DMQTT_TEST_4=OFF -DMQTT_TEST_5=OFF -DMQTT_TEST_6=OFF -DMQTT_TEST_7=OFF -DMQTT_USE_TLS=OFF  -DMQTT_BUILD_EXAMPLES=OFF -DMQTT_USE_WS=ON" CXXFLAGS="-std=c++17" MAKEFLAGS="-j2"
      addons: &addonsconfig
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-5.0
            - llvm-toolchain-trusty
            - sourceline: 'ppa:mhier/libboost-latest'
          packages:
            - lcov
            - openssl
            - g++-multilib
            - gcc-multilib
            - gcc-7-multilib
            - g++-7-multilib
            - bzip2
            - clang-5.0
            - libc6-dbg
            - boost1.67
    - os: linux
      sudo: required
      compiler: clang
      env: FLAGS="-DMQTT_TEST_1=ON  -DMQTT_TEST_2=ON -DMQTT_TEST_3=ON  -DMQTT_TEST_4=OFF -DMQTT_TEST_5=OFF -DMQTT_TEST_6=OFF -DMQTT_TEST_7=OFF -DMQTT_USE_TLS=ON  -DMQTT_BUILD_EXAMPLES=OFF -DMQTT_USE_WS=ON -DMQTT_USE_STR_CHECK=ON -DMQTT_STD_ANY=OFF -DMQTT_STD_OPTIONAL=OFF -DMQTT_STD_VARIANT=OFF -DMQTT_STD_STRING_VIEW=OFF" CFLAGS="-Werror -g -Wall -Wextra -Wno-ignored-qualifiers -fsanitize=address -fno-omit-frame-pointer" CXXFLAGS="-std=c++14 -fsanitize=address -fno-omit-frame-pointer" LDFLAGS="-fsanitize=address" MAKEFLAGS="-j1"
      addons: *addonsconfig
    - os: linux
      sudo: required
      compiler: clang
      env: FLAGS="-DMQTT_TEST_1=OFF -DMQTT_TEST_2=OFF -DMQTT_TEST_3=OFF -DMQTT_TEST_4=ON  -DMQTT_TEST_5=ON  -DMQTT_TEST_6=ON  -DMQTT_TEST_7=OFF -DMQTT_USE_TLS=ON  -DMQTT_BUILD_EXAMPLES=OFF -DMQTT_USE_WS=ON -DMQTT_USE_STR_CHECK=ON -DMQTT_STD_ANY=ON -DMQTT_STD_OPTIONAL=ON -DMQTT_STD_VARIANT=ON -DMQTT_STD_STRING_VIEW=ON" CFLAGS="-Werror -g -Wall -Wextra -Wno-ignored-qualifiers -fsanitize=address -fno-omit-frame-pointer" CXXFLAGS="-std=c++17 -fsanitize=address -fno-omit-frame-pointer" LDFLAGS="-fsanitize=address" MAKEFLAGS="-j1"
      addons: *addonsconfig
    - os: linux
      sudo: required
      compiler: clang
      env: FLAGS="-DMQTT_TEST_1=OFF -DMQTT_TEST_2=OFF -DMQTT_TEST_3=OFF -DMQTT_TEST_4=OFF -DMQTT_TEST_5=OFF -DMQTT_TEST_6=OFF -DMQTT_TEST_7=ON  -DMQTT_USE_TLS=ON  -DMQTT_BUILD_EXAMPLES=ON  -DMQTT_USE_WS=ON -DMQTT_USE_STR_CHECK=ON -DMQTT_STD_ANY=ON -DMQTT_STD_OPTIONAL=ON -DMQTT_STD_VARIANT=ON -DMQTT_STD_STRING_VIEW=ON" CFLAGS="-fsanitize=address -fno-omit-frame-pointer" CXXFLAGS="-std=c++17 -Werror -g -Wall -Wextra -Wno-ignored-qualifiers -Wconversion -fsanitize=address -fno-omit-frame-pointer" LDFLAGS="-fsanitize=address" MAKEFLAGS="-j1"
      addons: *addonsconfig
    - os: linux
      compiler: gcc
      env: FLAGS="-DMQTT_CODECOV=ON -DMQTT_TEST_1=ON  -DMQTT_TEST_2=ON  -DMQTT_TEST_3=OFF -DMQTT_TEST_4=OFF -DMQTT_TEST_5=OFF -DMQTT_TEST_6=OFF -DMQTT_TEST_7=OFF -DMQTT_BUILD_EXAMPLES=OFF -DMQTT_USE_TLS=OFF -DMQTT_USE_WS=ON -DMQTT_USE_STR_CHECK=ON -DMQTT_STD_ANY=ON -DMQTT_STD_OPTIONAL=ON -DMQTT_STD_VARIANT=ON -DMQTT_STD_STRING_VIEW=ON -DMQTT_STD_SHARED_PTR_ARRAY=ON" CXXFLAGS="-std=c++17" MAKEFLAGS="-j1" COV="ON"
      addons: *addonsconfig
    - os: linux
      compiler: gcc
      env: FLAGS="-DMQTT_CODECOV=ON -DMQTT_TEST_1=OFF -DMQTT_TEST_2=OFF -DMQTT_TEST_3=ON  -DMQTT_TEST_4=ON  -DMQTT_TEST_5=OFF -DMQTT_TEST_6=OFF -DMQTT_TEST_7=OFF -DMQTT_BUILD_EXAMPLES=OFF -DMQTT_USE_TLS=OFF -DMQTT_USE_WS=ON -DMQTT_USE_STR_CHECK=ON -DMQTT_STD_ANY=ON -DMQTT_STD_OPTIONAL=ON -DMQTT_STD_VARIANT=ON -DMQTT_STD_STRING_VIEW=ON" CXXFLAGS="-std=c++17" MAKEFLAGS="-j1" COV="ON"
      addons: *addonsconfig
    - os: linux
      compiler: gcc
      env: FLAGS="-DMQTT_CODECOV=ON -DMQTT_TEST_1=OFF -DMQTT_TEST_2=OFF -DMQTT_TEST_3=OFF -DMQTT_TEST_4=OFF -DMQTT_TEST_5=ON  -DMQTT_TEST_6=ON  -DMQTT_TEST_7=OFF -DMQTT-DMQTT_BUILD_EXAMPLES=OFF _NO_TLS=ON -DMQTT_USE_WS=ON -DMQTT_USE_STR_CHECK=ON -DMQTT_STD_ANY=ON -DMQTT_STD_OPTIONAL=ON -DMQTT_STD_VARIANT=ON -DMQTT_STD_STRING_VIEW=ON" CXXFLAGS="-std=c++17" MAKEFLAGS="-j1" COV="ON"
      addons: *addonsconfig
    - os: linux
      sudo: required
      compiler: gcc
      env: FLAGS="-DMQTT_CODECOV=ON -DMQTT_TEST_1=OFF -DMQTT_TEST_2=OFF -DMQTT_TEST_3=OFF -DMQTT_TEST_4=OFF -DMQTT_TEST_5=OFF -DMQTT_TEST_6=OFF -DMQTT_TEST_7=ON  -DMQTT_BUILD_EXAMPLES=ON  -DMQTT_USE_TLS=ON -DMQTT_USE_WS=OFF -DMQTT_USE_STR_CHECK=OFF" CXXFLAGS="-std=c++14" MAKEFLAGS="-j2" COV="ON"
      addons: *addonsconfig

script:
  - CXXFLAGS="${CXXFLAGS} -Werror -g -Wall -Wextra -Wno-ignored-qualifiers -Wconversion -pedantic -DBOOST_ASIO_NO_DEPRECATED -DBOOST_ASIO_ENABLE_BUFFER_DEBUGGING -DBOOST_MULTI_INDEX_ENABLE_SAFE_MODE -DBOOST_MULTI_INDEX_DISABLE_SERIALIZATION -DBOOST_MULTI_INDEX_ENABLE_INVARIANT_CHECKING"
  - mkdir build && cd build && cmake -DCMAKE_CXX_COMPILER="${CXX}" -DCMAKE_C_COMPILER="${CC}" -DCMAKE_LIBRARY_PATH="${BASE}/usr/lib" -DOPENSSL_ROOT_DIR="${OPENSSL_ROOT_DIR}" $FLAGS .. && make check_deps VERBOSE=1 && travis_wait 50 make $MAKEFLAGS VERBOSE=1 && ctest -VV

after_success:
  # Create lcov report
  - if [ "$COV" == "ON" ]; then lcov --capture --directory . --output-file coverage.info; fi
  - if [ "$COV" == "ON" ]; then lcov --remove coverage.info '/usr/*' --output-file coverage.info; fi # filter system-files
  - if [ "$COV" == "ON" ]; then lcov --list coverage.info; fi # debug info
  # Uploading report to CodeCov
  - if [ "$COV" == "ON" ]; then bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"; fi
